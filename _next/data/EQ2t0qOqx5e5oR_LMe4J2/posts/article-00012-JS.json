{"pageProps":{"post":{"title":"JavaScript/ES2015学習","date":"2022-12-22","slug":"article-00012-JS","content":"<h2 id=\"javascriptとは\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#javascriptとは\"><span class=\"icon icon-link\"></span></a>◆JavaScriptとは？</h2>\n<p>JavaScriptはWEBブラウザの中で動くプログラミング言語です。WEBサイトで操作をしたときに表示が書き換わったり、WEBサイトのサーバーと通信してデータを取得したりと現在のWEBサイトには欠かせないプログラミング言語です。このようなJavaScriptを活用してアプリケーションのように操作できるWEBサイトをWEBアプリとも言います。</p>\n<p>JavaScriptはウェブブラウザだけではなく、Node.jsというサーバー側のアプリケーションを作る仕組みでも利用されています。 また、デスクトップアプリやスマートフォンアプリ、IoT（Internet of Things）デバイスでもJavaScriptを使って動かせるものがあります。 このように、JavaScriptはかなり幅広い環境で動いているプログラミング言語で、さまざまな種類のアプリケーションを作成できます。</p>\n<h3 id=\"es2015とは\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#es2015とは\"><span class=\"icon icon-link\"></span></a>ES2015とは？</h3>\n<p>ES2015(ES6)は、ECMAScript 6th editionの6を取ってES6と呼ばれることがあるが、2015年に標準化されたため正式名称はES2015になった。</p>\n<p>ただし、どちらの名称でも問題はない。エンジニアコミュニティではES6の名称の方が浸透しているらしい。</p>\n<h3 id=\"大文字と小文字を区別する\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#大文字と小文字を区別する\"><span class=\"icon icon-link\"></span></a>大文字と小文字を区別する</h3>\n<p>JavaScriptは大文字小文字を区別します。たとえば、次のようにnameという変数を大文字と小文字で書いた場合に、 それぞれは別々のnameとNAMEという名前の変数として認識されます。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// `name`という名前の変数を宣言</span>\n<span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"azu\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// `NAME`という名前の変数を宣言</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"azu\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>また、大文字で開始しなければならないといった命名規則が意味を持つケースはありません。 そのため、あくまで別々の名前として認識されるというだけになっています （変数についての詳細は「変数と宣言」の章で解説します）。</p>\n<h3 id=\"予約語を持つ\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#予約語を持つ\"><span class=\"icon icon-link\"></span></a>予約語を持つ</h3>\n<p>JavaScriptには特別な意味を持つキーワードがあり、これらは予約語とも呼ばれます。 このキーワードと同じ名前の変数や関数は宣言できません。 先ほどの、変数を宣言するconstも予約語のひとつとなっています。 そのため、constという名前の変数名は宣言できません。</p>\n<h3 id=\"文はセミコロンで区切られる\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#文はセミコロンで区切られる\"><span class=\"icon icon-link\"></span></a>文はセミコロンで区切られる</h3>\n<p>JavaScriptは、文（Statement）ごとに処理していき、文はセミコロン（;）によって区切られます。 特殊なルールに基づき、セミコロンがない文も、行末に自動でセミコロンが挿入されるという仕組みも持っています。1 しかし、暗黙的なものへ頼ると意図しない挙動が発生するため、セミコロンは常に書くようにします （詳細は「文と式」の章で解説します）。</p>\n<p>また、スペース、タブ文字などは空白文字（ホワイトスペース）と呼ばれます。 これらの空白文字を文にいくつ置いても挙動に違いはありません。</p>\n<p>たとえば、次の1足す1を行う2つの文は、+の前後の空白文字の個数に違いはありますが、動作としてはまったく同じ意味となります。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 式や文の間にスペースがいくつあっても同じ意味となる</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">1</span>   <span class=\"token operator\">+</span>   <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"strict-mode\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#strict-mode\"><span class=\"icon icon-link\"></span></a>strict mode</h3>\n<p>JavaScriptにはstrict modeという実行モードが存在しています。 名前のとおり厳格な実行モードで、古く安全でない構文や機能が一部禁止されています。</p>\n<p>\"use strict\"という文字列をファイルまたは関数の先頭に書くことで、そのスコープにあるコードはstrict modeで実行されます。 また、後述する\"Module\"の実行コンテキストでは、このstrict modeがデフォルトとなっています。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// このコードはstrict modeで実行される</span>\n</code></pre>\n<p>strict modeでは、evalやwithといったレガシーな機能や構文を禁止します。 また、明らかな問題を含んだコードに対しては早期的に例外を投げることで、開発者が間違いに気づきやすくしてくれます。</p>\n<p>たとえば、次のようなconstなどのキーワードを含まずに変数を宣言しようとした場合に、strict modeでは例外が発生します。 strict modeでない場合は、例外が発生せずにグローバル変数が作られます。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\nmistypedVariable <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => ReferenceError</span>\n</code></pre>\n<p>このように、strict modeでは開発者が安全にコードを書けるように、JavaScriptの落とし穴を一部ふさいでくれます。 そのため、常にstrict modeで実行できるコードを書くことが、より安全なコードにつながります。</p>\n<p>本書では、明示的に「strict modeではない」ことを宣言した場合を除き、 すべてstrict modeとして実行できるコードを扱います。</p>\n<h3 id=\"実行コンテキスト-scriptとmodule\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#実行コンテキスト-scriptとmodule\"><span class=\"icon icon-link\"></span></a>実行コンテキスト: ScriptとModule</h3>\n<p>JavaScriptの実行コンテキストとして\"Script\"と\"Module\"があります。 コードを書く場合には、この2つの実行コンテキストの違いを意識することは多くありません。</p>\n<p>\"Script\"の実行コンテキストは、多くの実行環境ではデフォルトの実行コンテキストです。 \"Script\"の実行コンテキストでは、デフォルトはstrict modeではありません。</p>\n<p>\"Module\"の実行コンテキストは、JavaScriptをモジュールとして実行するために、ECMAScript 2015で導入されたものです。 \"Module\"の実行コンテキストでは、デフォルトがstrict modeとなり、古く安全でない構文や機能は一部禁止されています。 また、モジュールの機能は\"Module\"の実行コンテキストでしか利用できません。モジュールについての詳細は「ECMAScriptモジュール」の章で解説します。</p>\n<h3 id=\"javascriptの仕様は毎年更新される\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#javascriptの仕様は毎年更新される\"><span class=\"icon icon-link\"></span></a>JavaScriptの仕様は毎年更新される</h3>\n<p>最後に、JavaScriptの仕様であるECMAScriptは毎年更新され、JavaScriptには新しい構文や機能が増え続けています。 そのため、この書籍で学んだ後もまだまだ知らなかったことが出てくるはずです。</p>\n<p>一方で、ECMAScriptは後方互換性が慎重に考慮されているため、過去に書いたJavaScriptのコードが動かなくなる変更はほとんど入りません。 そのため、この書籍で学んだことのすべてが無駄になることはありません。</p>\n<p>ECMAScriptの仕様がどのように策定されているかについては「ECMAScript」の章で解説します。</p>\n<h2 id=\"コメント\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#コメント\"><span class=\"icon icon-link\"></span></a>◆コメント</h2>\n<p>コメントはプログラムとして評価されないため、ソースコードの説明を書くために利用されています。 この書籍でも、JavaScriptのソースコードを解説するためにコメントを使っていきます。</p>\n<p>コメントの書き方には、一行コメントと複数行コメントの2種類があります。</p>\n<h3 id=\"一行コメント\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#一行コメント\"><span class=\"icon icon-link\"></span></a>一行コメント</h3>\n<p>一行コメントは名前のとおり、一行ずつコメントを書く際に利用します。 // 以降から行末までがコメントとして扱われるため、プログラムとして評価されません。</p>","ogImage":{"url":"/assets/blog/JavaScript/ES2015.png"},"coverImage":"/assets/blog/JavaScript/ES2015.png","tags":["JavaScript/","ES2015"]}},"__N_SSG":true}