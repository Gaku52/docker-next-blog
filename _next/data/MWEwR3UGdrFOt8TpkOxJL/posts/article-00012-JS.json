{"pageProps":{"post":{"title":"JavaScript基礎学習①","date":"2022-12-22T23:00","slug":"article-00012-JS","content":"<h2 id=\"javascriptとは\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#javascriptとは\"><span class=\"icon icon-link\"></span></a>◆JavaScriptとは？</h2>\n<p>JavaScriptはWEBブラウザの中で動くプログラミング言語です。WEBサイトで操作をしたときに表示が書き換わったり、WEBサイトのサーバーと通信してデータを取得したりと現在のWEBサイトには欠かせないプログラミング言語です。このようなJavaScriptを活用してアプリケーションのように操作できるWEBサイトをWEBアプリとも言います。</p>\n<p>JavaScriptはWEBブラウザだけではなく、Node.jsというサーバー側のアプリケーションを作る仕組みでも利用されています。 また、デスクトップアプリやスマートフォンアプリ、IoT（Internet of Things）デバイスでもJavaScriptを使って動かせるものがあります。 このように、JavaScriptはかなり幅広い環境で動いているプログラミング言語で、さまざまな種類のアプリケーションを作成できます。</p>\n<h3 id=\"es2015とは\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#es2015とは\"><span class=\"icon icon-link\"></span></a>ES2015とは？</h3>\n<p>ES2015(ES6)は、ECMAScript 6th editionの6を取ってES6と呼ばれることもあります(正式名称はES2015)。<br>\nただし、どちらの名称でも問題はないです。エンジニアコミュニティではES6の名称の方が浸透しているらしい。</p>\n<h3 id=\"大文字と小文字を区別する\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#大文字と小文字を区別する\"><span class=\"icon icon-link\"></span></a>大文字と小文字を区別する</h3>\n<p>JavaScriptは大文字小文字を区別します。たとえば、次のようにnameという変数を大文字と小文字で書いた場合に、 それぞれは別々のnameとNAMEという名前の変数として認識されます。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// `name`という名前の変数を宣言</span>\n<span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"azu\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// `NAME`という名前の変数を宣言</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"azu\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>また、大文字で開始しなければならない訳ではありません。あくまで別々の名前として認識されるというだけになっています。</p>\n<h3 id=\"予約語を持つ\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#予約語を持つ\"><span class=\"icon icon-link\"></span></a>予約語を持つ</h3>\n<p>JavaScriptには特別な意味を持つキーワードのことを予約語と言います。 このキーワードと同じ名前の変数や関数は宣言できません。 先ほどの、変数を宣言するconstも予約語のひとつです。 そのためconstという名前の変数名は宣言できません。</p>\n<h3 id=\"文はセミコロンで区切られる\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#文はセミコロンで区切られる\"><span class=\"icon icon-link\"></span></a>文はセミコロンで区切られる</h3>\n<p>JavaScriptは、文（Statement）ごとに処理していき、文はセミコロン（;）によって区切られます。 特殊なルールに基づき、セミコロンがない文も、行末に自動でセミコロンが挿入されるという仕組みも持っています。1 しかし、暗黙的なものへ頼ると意図しない挙動が発生するため、セミコロンは常に書くようにします （詳細は「文と式」の章で解説します）。</p>\n<p>また、スペース、タブ文字などは空白文字（ホワイトスペース）と呼ばれます。 これらの空白文字を文にいくつ置いても挙動に違いはありません。たとえば、次の1足す1を行う2つの文は、+の前後の空白文字の個数に違いはありますが、動作としてはまったく同じ意味となります。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 式や文の間にスペースがいくつあっても同じ意味となる</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">1</span>   <span class=\"token operator\">+</span>   <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"strict-mode\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#strict-mode\"><span class=\"icon icon-link\"></span></a>strict mode</h3>\n<p>JavaScriptにはstrict modeという実行モードが存在しています。 名前のとおり厳格な実行モードで、古く安全でない構文や機能が一部禁止されています。</p>\n<p>\"use strict\"という文字列をファイルまたは関数の先頭に書くことで、そのスコープにあるコードはstrict modeで実行されます。 また、後述する\"Module\"の実行コンテキストでは、このstrict modeがデフォルトとなっています。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// このコードはstrict modeで実行される</span>\n</code></pre>\n<p>strict modeでは、evalやwithといったレガシーな機能や構文を禁止します。 また、明らかな問題を含んだコードに対しては早期的に例外を投げることで、開発者が間違いに気づきやすくしてくれます。</p>\n<p>たとえば、次のようなconstなどのキーワードを含まずに変数を宣言しようとした場合に、strict modeでは例外が発生します。 strict modeでない場合は、例外が発生せずにグローバル変数が作られます。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\nmistypedVariable <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => ReferenceError</span>\n\n</code></pre>\n<p>このように、strict modeでは開発者が安全にコードを書けるように、JavaScriptの落とし穴を一部ふさいでくれます。 そのため、常にstrict modeで実行できるコードを書くことが、より安全なコードにつながります。</p>\n<p>本学習では、明示的に「strict modeではない」ことを宣言した場合を除き、 すべてstrict modeとして実行できるコードを扱います。</p>\n<h3 id=\"実行コンテキスト-scriptとmodule\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#実行コンテキスト-scriptとmodule\"><span class=\"icon icon-link\"></span></a>実行コンテキスト: ScriptとModule</h3>\n<p>JavaScriptの実行コンテキストとして\"Script\"と\"Module\"があります。 コードを書く場合には、この2つの実行コンテキストの違いを意識することは多くありません。</p>\n<p>\"Script\"の実行コンテキストは、多くの実行環境ではデフォルトの実行コンテキストです。 \"Script\"の実行コンテキストでは、デフォルトはstrict modeではありません。</p>\n<p>\"Module\"の実行コンテキストは、JavaScriptをモジュールとして実行するために、ECMAScript 2015で導入されたものです。 \"Module\"の実行コンテキストでは、デフォルトがstrict modeとなり、古く安全でない構文や機能は一部禁止されています。 また、モジュールの機能は\"Module\"の実行コンテキストでしか利用できません。モジュールについての詳細は「ECMAScriptモジュール」の章で解説します。</p>\n<h3 id=\"javascriptの仕様は毎年更新される\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#javascriptの仕様は毎年更新される\"><span class=\"icon icon-link\"></span></a>JavaScriptの仕様は毎年更新される</h3>\n<p>最後に、JavaScriptの仕様であるECMAScriptは毎年更新され、JavaScriptには新しい構文や機能が増え続けています。そのため今後もまだまだ知らなかったことが出てくるはずです。</p>\n<p>一方で、ECMAScriptは後方互換性が慎重に考慮されているため、過去に書いたJavaScriptのコードが動かなくなる変更はほとんど入りません。 そのため、この書籍で学んだことのすべてが無駄になることはありません。</p>\n<p>ECMAScriptの仕様がどのように策定されているかについては「ECMAScript」の章で解説します。</p>\n<h2 id=\"コメント\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#コメント\"><span class=\"icon icon-link\"></span></a>◆コメント</h2>\n<p>コメントはプログラムとして評価されないため、ソースコードの説明を書くために利用されています。 この書籍でも、JavaScriptのソースコードを解説するためにコメントを使っていきます。</p>\n<p>コメントの書き方には、一行コメントと複数行コメントの2種類があります。</p>\n<h3 id=\"一行コメント\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#一行コメント\"><span class=\"icon icon-link\"></span></a>一行コメント</h3>\n<p>一行コメントは名前のとおり、一行ずつコメントを書く際に利用します。 // 以降から行末までがコメントとして扱われるため、プログラムとして評価されません。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 一行コメント</span>\n<span class=\"token comment\">// この部分はコードとして評価されない</span>\n</code></pre>\n<h3 id=\"複数行コメント\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#複数行コメント\"><span class=\"icon icon-link\"></span></a>複数行コメント</h3>\n<p>複数行コメントは名前のとおり、複数行のコメントを書く際に利用します。 一行コメントとは違い複数行をまとめて書けるので、長い説明を書く際に利用されています。</p>\n<p>/* と */で囲まれた範囲がコメントとして扱われるため、プログラムとして評価されません。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/*\n   複数行コメント\n   囲まれている範囲がコードとして評価されない\n */</span>\n\n</code></pre>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/* ネストされた /* 複数行コメント */</span> は書けない <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\n</code></pre>\n<h3 id=\"html-likeコメント\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#html-likeコメント\"><span class=\"icon icon-link\"></span></a>HTML-likeコメント</h3>\n<p>ES2015から後方互換性のための仕様としてHTML-likeコメントが追加されました。 このHTML-likeコメントは、ブラウザの実装に合わせた後方互換性のための仕様として定義されています。HTML-likeコメントは名前のとおり、HTMLのコメントと同じ表記です。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> この行はコメントと認識される\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"この行はJavaScriptのコードとして実行される\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">></span>  この行もコメントと認識される\n</code></pre>\n<p>ここでは、  がそれぞれ一行コメントとして認識されます。</p>\n<p>JavaScriptをサポートしていないブラウザでは、タグを正しく認識できないために書かれたコードが表示されていました。 それを避けるためにの中をHTMLコメントで囲み、表示はされないが実行されるという回避策が取られていました。 今はタグをサポートしていないブラウザはないため、この回避策は不要です。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span> <span class=\"token attr-name\">language</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n&#x3C;!--\n  document.bgColor = \"brown\";\n// -->\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>一方、タグ内、つまりJavaScript内にHTMLコメントが書かれているサイトは残っています。 このようなサイトでもJavaScriptが動作するという、後方互換性のための仕様として追加されています。</p>\n<p>歴史的経緯は別として、ECMAScriptではこのように後方互換性が慎重に取り扱われます。 ECMAScriptは一度入った仕様が使えなくなることはほとんどないため、基本文法で覚えたことが使えなくなることはありません。 一方で、仕様が更新されるたびに新しい機能が増えるため、それを学び続けることには変わりありません。</p>\n<h3 id=\"まとめ\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#まとめ\"><span class=\"icon icon-link\"></span></a>まとめ</h3>\n<p>// 以降から行末までが一行コメント\n/* と */で囲まれた範囲が複数行コメント\nHTML-likeコメントは後方互換性のためだけに存在する</p>\n<h2 id=\"変数と宣言\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#変数と宣言\"><span class=\"icon icon-link\"></span></a>◆変数と宣言</h2>\n<p>プログラミング言語には、文字列や数値などのデータに名前をつけて、繰り返し利用できるようにする変数という機能があります。JavaScriptには「これは変数です」という宣言をするキーワードとして、 const、let、varの3つがあります。</p>\n<p>varはもっとも古くからある変数宣言のキーワードですが、意図しない動作を作りやすい問題が知られています。 そのためECMAScript 2015で、varの問題を改善するためにconstとletという新しいキーワードが導入されました。</p>\n<p>この章ではconst、let、varの順に、それぞれの方法で宣言した変数の違いについて見ていきます。</p>\n<h3 id=\"es2015-const\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#es2015-const\"><span class=\"icon icon-link\"></span></a>[ES2015] const</h3>\n<p>constキーワードでは、再代入できない変数の宣言とその変数が参照する値（初期値）を定義できます。次のように、constキーワードに続いて変数名を書き、代入演算子（=）の右辺に変数の初期値を書いて変数を定義できます。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> 変数名 <span class=\"token operator\">=</span> 初期値<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>次のコードではbookTitleという変数を宣言し、初期値が\"JavaScript Primer\"という文字列であることを定義しています。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> bookTitle <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript Primer\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>const、let、varどのキーワードも共通の仕組みですが、変数同士を,（カンマ）で区切ることにより、同時に複数の変数を定義できます。</p>\n<p>次のコードでは、bookTitleとbookCategoryという変数を順番に定義しています。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> bookTitle <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript Primer\"</span><span class=\"token punctuation\">,</span>\n      bookCategory <span class=\"token operator\">=</span> <span class=\"token string\">\"プログラミング\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>これは次のように書いた場合と同じ意味になります。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> bookTitle <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript Primer\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bookCategory <span class=\"token operator\">=</span> <span class=\"token string\">\"プログラミング\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>また、constは再代入できない変数を宣言するキーワードです。 そのため、constキーワードで宣言した変数に対して、後から値を代入することはできません。</p>\n<p>次のコードでは、constで宣言した変数bookTitleに対して値を再代入しているため、次のようなエラー（TypeError）が発生します。 エラーが発生するとそれ以降の処理は実行されなくなります。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> bookTitle <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript Primer\"</span><span class=\"token punctuation\">;</span>\nbookTitle <span class=\"token operator\">=</span> <span class=\"token string\">\"新しいタイトル\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => TypeError: invalid assignment to const 'bookTitle'</span>\n</code></pre>\n<p>一般的に変数への再代入は「変数の値は最初に定義した値と常に同じである」という参照透過性と呼ばれるルールを壊すため、バグを発生させやすい要因として知られています。そのため、変数に対して値を再代入する必要がない場合は、constキーワードで変数宣言することを推奨しています。</p>\n<p>変数に値を再代入したいケースとして、ループなどの反復処理の途中で特定の変数が参照する値を変化させたい場合があります。 そのような場合には、変数への再代入が可能なletキーワードを利用します。</p>\n<h3 id=\"es2015-let\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#es2015-let\"><span class=\"icon icon-link\"></span></a>[ES2015] let</h3>\n<p>letキーワードでは、値の再代入が可能な変数を宣言できます。 letの使い方はconstとほとんど同じです。</p>\n<p>次のコードでは、bookTitleという変数を宣言し、初期値を\"JavaScript Primer\"という文字列であることを定義しています。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> bookTitle <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript Primer\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>letはconstとは異なり、初期値を指定しない変数も定義できます。 初期値が指定されなかった変数はデフォルト値としてundefinedという値で初期化されます（undefinedは値が未定義ということを表す値です）。</p>\n<p>次のコードでは、bookTitleという変数を宣言しています。 このときbookTitleには初期値が指定されていないため、デフォルト値としてundefinedで初期化されます。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> bookTitle<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// `bookTitle`は自動的に`undefined`という値になる</span>\n</code></pre>\n<p>このletで宣言されたbookTitleという変数には、代入演算子（=）を使うことで値を代入できます。 代入演算子（=）の右側には変数へ代入する値を書きますが、ここでは\"JavaScript Primer\"という文字列を代入しています。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> bookTitle<span class=\"token punctuation\">;</span>\nbookTitle <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript Primer\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>letで宣言した変数に対しては何度でも値の代入が可能です。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\ncount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\ncount <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\ncount <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"var\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#var\"><span class=\"icon icon-link\"></span></a>var</h3>\n<p>varキーワードでは、値の再代入が可能な変数を宣言できます。 varの使い方はletとほとんど同じです。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">var</span> bookTitle <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript Primer\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>varでは、letと同じように初期値がない変数を宣言でき、変数に対して値の再代入もできます。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">var</span> bookTitle<span class=\"token punctuation\">;</span>\nbookTitle <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript Primer\"</span><span class=\"token punctuation\">;</span>\nbookTitle <span class=\"token operator\">=</span> <span class=\"token string\">\"新しいタイトル\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>varの問題\nvarはletとよく似ていますが、varキーワードには同じ名前の変数を再定義できてしまう問題があります。</p>\n<p>letやconstでは、同じ名前の変数を再定義しようとすると、次のような構文エラー（SyntaxError）が発生します。 そのため、間違えて変数を二重に定義してしまうというミスを防ぐことができます。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// \"x\"という変数名で変数を定義する</span>\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 同じ変数名の変数\"x\"を定義するとSyntaxErrorとなる</span>\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => SyntaxError: redeclaration of let x</span>\n</code></pre>\n<p>一方、varは同じ名前の変数を再定義できます。 これは意図せずに同じ変数名で定義してもエラーとならずに、値を上書きしてしまいます。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// \"x\"という変数を定義する</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 同じ変数名の変数\"x\"を定義できる</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 変数xは2となる</span>\n</code></pre>\n<p>またvarには変数の巻き上げと呼ばれる意図しない挙動があり、letやconstではこの問題が解消されています。 varによる変数の巻き上げの問題については「関数とスコープ」の章で解説します。 そのため、現時点では「letはvarを改善したバージョン」ということだけ覚えておくとよいです。</p>\n<p>このように、varにはさまざまな問題があります。 また、ほとんどすべてのケースでvarはconstかletに置き換えが可能です。 そのため、これから書くコードに対してvarを利用することは避けたほうがよいでしょう。</p>\n<h3 id=\"なぜletやconstは追加されたのか\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#なぜletやconstは追加されたのか\"><span class=\"icon icon-link\"></span></a>なぜletやconstは追加されたのか？</h3>\n<p>ES2015では、varそのものを改善するのではなく、新しくconstとletというキーワードを追加することで、varの問題を回避できるようにしました。var自体の動作を変更しなかったのは、後方互換性のためです。</p>\n<p>なぜなら、varの挙動自体を変更してしまうと、すでにvarで書かれたコードの動作が変わってしまい、動かなくなるアプリケーションが出てくるためです。 新しくconstやletなどのキーワードをECMAScript仕様に追加しても、そのキーワードを使っているソースコードは追加時点では存在しません。1 そのため、constやletが追加されても後方互換性には影響がありません。</p>\n<p>このように、ECMAScriptでは機能を追加する際にも後方互換性を重視しているため、var自体の挙動は変更されませんでした。</p>\n<h3 id=\"変数名に使える名前のルール\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#変数名に使える名前のルール\"><span class=\"icon icon-link\"></span></a>変数名に使える名前のルール</h3>\n<p>ここまででconst、let、varでの変数宣言とそれぞれの特徴について見てきました。 どのキーワードにおいても宣言できる変数に利用できる名前のルールは同じです。 また、このルールは変数の名前や関数の名前といったJavaScriptの識別子において共通するルールとなります。</p>\n<p>変数名の名前（識別子）には、次のルールがあります。</p>\n<p>半角のアルファベット、<em>（アンダースコア）、$（ダラー）、数字を組み合わせた名前にする\n変数名は数字から開始できない\n予約語と被る名前は利用できない\n変数の名前は、半角のアルファベットであるAからZ（大文字）とaからz（小文字）、</em>（アンダースコア）、$（ダラー）、数字の0から9を組み合わせた名前にします。 JavaScriptでは、アルファベットの大文字と小文字は区別されます。</p>\n<p>これらに加えて、ひらがなや一部の漢字なども変数名に利用できますが、全角の文字列が混在すると環境によって扱いにくいこともあるためお勧めしません。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> $<span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK: $が利用できる</span>\n<span class=\"token keyword\">let</span> _title<span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK: _が利用できる</span>\n<span class=\"token keyword\">let</span> jquery<span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK: 小文字のアルファベットが利用できる</span>\n<span class=\"token keyword\">let</span> <span class=\"token constant\">TITLE</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK: 大文字のアルファベットが利用できる</span>\n<span class=\"token keyword\">let</span> es2015<span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK: 数字は先頭以外なら利用できる</span>\n<span class=\"token keyword\">let</span> 日本語の変数名<span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK: 一部の漢字や日本語も利用できる</span>\n</code></pre>\n<p>変数名に数字を含めることはできますが、変数名を数字から開始することはできません。 これは変数名と数値が区別できなくなってしまうためです。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> 1st<span class=\"token punctuation\">;</span> <span class=\"token comment\">// NG: 数字から始まっている</span>\n<span class=\"token keyword\">let</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NG: 数字のみで構成されている</span>\n</code></pre>\n<p>また、予約語として定義されているキーワードは変数名には利用できません。 予約語とは、letのように構文として意味を持つキーワードのことです。 予約語の一覧は予約語 - JavaScript | MDNで確認できますが、基本的には構文として利用される名前が予約されています。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">let</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NG: `let`は変数宣言のために予約されているので利用できない</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NG: `if`はif文のために予約されているので利用できない</span>\n</code></pre>\n<h3 id=\"constは定数ではない\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#constは定数ではない\"><span class=\"icon icon-link\"></span></a>constは定数ではない</h3>\n<p>constは「再代入できない変数」を定義する変数宣言であり、必ずしも定数を定義するわけではありません。 定数とは、一度定義した名前（変数名）が常に同じ値を示すものです。</p>\n<p>JavaScriptでも、const宣言によって定数に近い変数を定義できます。 次のように、const宣言によって定義した変数を、変更できないプリミティブな値で初期化すれば、それは実質的に定数です。 プリミティブな値とは、数値や文字列などオブジェクト以外のデータです（詳細は「データ型とリテラル」の章で解説します）。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// TEN_NUMBERという変数は常に10という値を示す</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">TEN_NUMBER</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>しかし、JavaScriptではオブジェクトなどもconst宣言できます。 次のコードのように、オブジェクトという値そのものは、初期化したあとでも変更できます。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// `const`でオブジェクトを定義している</span>\n<span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    key<span class=\"token operator\">:</span> <span class=\"token string\">\"値\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// オブジェクトそのものは変更できてしまう</span>\nobject<span class=\"token punctuation\">.</span><span class=\"token property-access\">key</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"新しい値\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>このように、constで宣言した変数が常に同じ値を示すとは限らないため、定数とは呼べません （詳細は「オブジェクト」の章で解説します）。</p>\n<p>またconstには、変数名の命名規則はなく、代入できる値にも制限はありません。 そのため、const宣言の特性として「再代入できない変数」を定義すると理解しておくのがよいでしょう。</p>\n<h3 id=\"まとめ-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#まとめ-1\"><span class=\"icon icon-link\"></span></a>まとめ</h3>\n<p>constは、再代入できない変数を宣言できる\nletは、再代入ができる変数を宣言できる\nvarは、再代入ができる変数を宣言できるが、いくつかの問題が知られている\n変数の名前（識別子）には利用できる名前のルールがある\nvarはほとんどすべてのケースでletやconstに置き換えが可能です。 constは再代入できない変数を定義するキーワードです。再代入を禁止することで、ミスから発生するバグを減らすことが期待できます。 このため変数を宣言する場合には、まずconstで定義できないかを検討し、できない場合はletを使うことを推奨しています。</p>\n<h2 id=\"データ型とリテラル\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#データ型とリテラル\"><span class=\"icon icon-link\"></span></a>◆データ型とリテラル</h2>\n<h3 id=\"データ型\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#データ型\"><span class=\"icon icon-link\"></span></a>データ型</h3>\n<p>JavaScriptは動的型付け言語に分類される言語であるため、静的型付け言語のような変数の型はありません。 しかし、文字列、数値、真偽値といった値の型は存在します。 これらの値の型のことをデータ型と呼びます。</p>\n<p>データ型を大きく分けると、プリミティブ型とオブジェクトの2つに分類されます。</p>\n<p>プリミティブ型（基本型）は、真偽値や数値などの基本的な値の型のことです。 プリミティブ型の値は、一度作成したらその値自体を変更できないというイミュータブル（immutable）の特性を持ちます。 JavaScriptでは、文字列も一度作成したら変更できないイミュータブルの特性を持ち、プリミティブ型の一種として扱われます。</p>\n<p>一方、プリミティブ型ではないものをオブジェクト（複合型）と呼び、 オブジェクトは複数のプリミティブ型の値またはオブジェクトからなる集合です。 オブジェクトは、一度作成した後もその値自体を変更できるためミュータブル（mutable）の特性を持ちます。 オブジェクトは、値そのものではなく値への参照を経由して操作されるため、参照型のデータとも言います。</p>\n<p>データ型を細かく見ていくと、7つのプリミティブ型とオブジェクトからなります。</p>\n<p>プリミティブ型（基本型）\n真偽値（Boolean）: trueまたはfalseのデータ型\n数値（Number）: 42 や 3.14159 などの数値のデータ型\n巨大な整数（BigInt）: ES2020から追加された9007199254740992nなどの任意精度の整数のデータ型\n文字列（String）: \"JavaScript\" などの文字列のデータ型\nundefined: 値が未定義であることを意味するデータ型\nnull: 値が存在しないことを意味するデータ型\nシンボル（Symbol）: ES2015から追加された一意で不変な値のデータ型\nオブジェクト（複合型）\nプリミティブ型以外のデータ\nオブジェクト、配列、関数、クラス、正規表現、Dateなど\nプリミティブ型でないものは、オブジェクトであると覚えていれば問題ありません。</p>\n<p>typeof演算子を使うことで、次のようにデータ型を調べることができます。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// => \"boolean\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => \"number\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">9007199254740992n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => \"bigint\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => \"string\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"シンボル\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// => \"symbol\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => \"undefined\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => \"object\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"配列\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => \"object\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"value\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => \"object\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => \"function\"</span>\n</code></pre>\n<p>実行後</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token builtin\">boolean</span>\n<span class=\"token builtin\">number</span>\nbigint\n<span class=\"token builtin\">string</span>\n<span class=\"token builtin\">symbol</span>\n<span class=\"token keyword nil\">undefined</span>\nobject\nobject\nobject\n<span class=\"token keyword\">function</span>\n</code></pre>\n<p>プリミティブ型の値は、それぞれtypeof演算子の評価結果として、その値のデータ型を返します。 一方で、オブジェクトに分類される値は\"object\"となります。</p>\n<p>配列([])とオブジェクト({})は、どちらも\"object\"という判定結果になります。 そのため、typeof演算子ではオブジェクトの詳細な種類を正しく判定することはできません。 ただし、関数はオブジェクトの中でも特別扱いされているため、typeof演算子の評価結果は\"function\"となります。 また、typeof nullが\"object\"となるのは、歴史的経緯のある仕様のバグ1です。</p>\n<p>このことからもわかるようにtypeof演算子は、プリミティブ型またはオブジェクトかを判別するものです。 typeof演算子では、オブジェクトの詳細な種類を判定できないことは、覚えておくとよいでしょう。 各オブジェクトの判定方法については、それぞれのオブジェクトの章で見ていきます。</p>\n<h3 id=\"リテラル\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#リテラル\"><span class=\"icon icon-link\"></span></a>リテラル</h3>\n<p>プリミティブ型の値や一部のオブジェクトは、リテラルを使うことで簡単に定義できるようになっています。</p>\n<p>リテラルとはプログラム上で数値や文字列など、データ型の値を直接記述できるように構文として定義されたものです。 たとえば、\"と\"で囲んだ範囲が文字列リテラルで、これは文字列型のデータを表現しています。</p>\n<p>次のコードでは、\"こんにちは\"という文字列型のデータを初期値に持つ変数strを定義しています。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// \"と\"で囲んだ範囲が文字列リテラル</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"こんにちは\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>リテラル表現がない場合は、その値を作る関数に引数を渡して作成する形になります。 そのような冗長な表現を避ける方法として、よく利用される主要なデータ型にはリテラルが用意されています。</p>\n<p>次の4つのプリミティブ型は、それぞれリテラル表現を持っています。</p>\n<p>真偽値\n数値\n文字列\nnull\nまた、オブジェクトの中でもよく利用されるものに関してはリテラル表現が用意されています。</p>\n<p>オブジェクト\n配列\n正規表現\nこれらのリテラルについて、まずはプリミティブ型から順番に見ていきます。</p>\n<h3 id=\"真偽値boolean\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#真偽値boolean\"><span class=\"icon icon-link\"></span></a>真偽値（Boolean）</h3>\n<p>真偽値にはtrueとfalseのリテラルがあります。 それぞれはtrueとfalseの値を返すリテラルで、見た目どおりの意味となります。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => true</span>\n<span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => false</span>\n</code></pre>\n<p>実行後</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token boolean\">false</span>\n</code></pre>\n<h3 id=\"数値number\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#数値number\"><span class=\"icon icon-link\"></span></a>数値（Number）</h3>\n<p>数値には42のような整数リテラルと3.14159のような浮動小数点数リテラルがあります。</p>\n<p>これらのリテラルで表現できる数値はIEEE 754の倍精度浮動小数として扱われます。 倍精度浮動小数では64ビットで数値を表現します。 64ビットのうち52ビットを数字の格納のために使い、11ビットを小数点の位置に使い、残りの1ビットはプラスとマイナスの符号です。 そのため、正確に扱える数値の最大値は2^53-1（2の53乗から1引いた値）となります。</p>\n<h4 id=\"整数リテラル\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#整数リテラル\"><span class=\"icon icon-link\"></span></a>整数リテラル</h4>\n<p>整数リテラルには次の4種類があります。</p>\n<p>10進数: 数字の組み合わせ\nただし、複数の数字を組み合わせた際に、先頭を0から開始すると8進数として扱われる場合があります\n例）0、2、10\n2進数: 0b（または0B）の後ろに、0または1の数字の組み合わせ\n例）0b0、0b10、0b1010\n8進数: 0o（または0O）の後ろに、0から7までの数字の組み合わせ\n0o は数字のゼロと小文字アルファベットのo\n例）0o644、0o777\n16進数: 0x（または0X）の後ろに、0から9までの数字とaからfまたはAからFのアルファベットの組み合わせ\nアルファベットの大文字・小文字の違いは値には影響しません\n例）0x30A2、0xEEFF\n0から9の数字のみで書かれた数値は、10進数として扱われます。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 1</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 10</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 255</span>\n</code></pre>\n<p>実行後</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token number\">1</span>\n<span class=\"token number\">10</span>\n<span class=\"token number\">255</span>\n</code></pre>\n<p>0bからはじまる2進数リテラルは、ビットを表現するのによく利用されています。 bは2進数を表すbinaryを意味しています。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0b1111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 15</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0b10000000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 1024</span>\n</code></pre>\n<p>実行後</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token number\">15</span>\n<span class=\"token number\">1024</span>\n</code></pre>\n<p>0oからはじまる8進数リテラルは、ファイルのパーミッションを表現するのによく利用されています。 oは8進数を表すoctalを意味しています。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0o644</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// => 420</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0o777</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// => 511</span>\n</code></pre>\n<p>実行後</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token number\">420</span>\n<span class=\"token number\">511</span>\n</code></pre>\n<p>次のように、0からはじまり、0から7の数字を組み合わせた場合も8進数として扱われます。 しかし、この表記は10進数と紛らわしいものであったため、ES2015で0oの8進数リテラルが新たに導入されました。 また、strict modeではこの書き方は例外が発生するため、次のような8進数の書き方は避けるべきです（詳細は「JavaScriptとは」のstrict modeを参照）。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 非推奨な8進数の書き方</span>\n<span class=\"token comment\">// strict modeは例外が発生</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0644</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// => 420</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0777</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// => 511</span>\n</code></pre>\n<p>実行後</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token number\">420</span>\n<span class=\"token number\">511</span>\n</code></pre>\n<p>0xからはじまる16進数リテラルは、文字のコードポイントやRGB値の表現などに利用されています。 xは16進数を表すhexを意味しています。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 255</span>\n<span class=\"token comment\">// 小文字で書いても意味は同じ</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 255</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x30A2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 12450</span>\n</code></pre>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token number\">255</span>\n<span class=\"token number\">255</span>\n<span class=\"token number\">12450</span>\n</code></pre>\n<h4 id=\"浮動小数点数リテラル\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#浮動小数点数リテラル\"><span class=\"icon icon-link\"></span></a>浮動小数点数リテラル</h4>\n<p>浮動小数点数をリテラルとして書く場合には、次の2種類の表記が利用できます。</p>\n<p>3.14159 のような .（ドット）を含んだ数値\n2e8 のような e または E を含んだ数値\n0からはじまる浮動小数点数は、0を省略して書くことができます。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token number\">.123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 0.123</span>\n</code></pre>\n<p>実行後</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token number\">0.123</span>\n</code></pre>\n<p>しかし、JavaScriptでは.をオブジェクトにおいて利用する機会が多いため、 0からはじまる場合でも省略せずに書いたほうが意図しない挙動を減らせるでしょう。</p>\n<p>Note 変数名を数字からはじめることができないのは、数値リテラルと衝突してしまうからです。</p>\n<p>eは指数（exponent）を意味する記号で、eのあとには指数部の値を書きます。 たとえば、2e8は2×10の8乗となるので、10進数で表すと200000000となります。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token number\">2e8</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 200000000</span>\n</code></pre>\n<p>実行後</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token number\">200000000</span>\n</code></pre>\n<h4 id=\"es2020-bigint\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#es2020-bigint\"><span class=\"icon icon-link\"></span></a>[ES2020] BigInt</h4>\n<p>JavaScriptでは、1や3.14159などの数値リテラルはIEEE 754で定義された倍精度浮動小数となります。 倍精度浮動小数で正確に扱える数値の最大値は2^53-1（2の53乗から1引いた値である9007199254740991）です。 この数値リテラルで安全に表せる最大の数値はNumber.MAX_SAFE_INTEGERとして定義されています。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 9007199254740991</span>\n</code></pre>\n<p>数値リテラルで2^53-1（9007199254740991）よりも大きな値を表現したり計算すると間違った結果となる場合があります。</p>\n<p>この問題を解決するために、ES2020ではBigIntという新しい整数型のデータ型とリテラルが追加されました。 数値リテラルは倍精度浮動小数（64ビット）で数値を扱うのに対して、BigIntでは任意の精度の整数を扱えます。 そのため、BigIntでは2^53-1（9007199254740991）よりも大きな整数を正しく表現できます。</p>\n<p>BigIntリテラルは、数値の後ろにnをつけます。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 1n</span>\n<span class=\"token comment\">// 2^53-1より大きな値も扱える</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">9007199254740992n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 9007199254740992n</span>\n</code></pre>\n<p>実行後</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token number\">1</span>\n<span class=\"token number\">9007199254740992</span>\n</code></pre>\n<p>BigIntは整数を扱うデータ型であるため、次のように小数点を含めた場合は構文エラーとなります。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token number\">2n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => SyntaxError</span>\n</code></pre>\n<h4 id=\"es2021-numeric-separators\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#es2021-numeric-separators\"><span class=\"icon icon-link\"></span></a>[ES2021] Numeric Separators</h4>\n<p>数値が大きくなるほど、桁数の見間違いなどが発生しやすくなります。 次のコードは、1兆を数値リテラルで書いていますが、桁数を読み取りにくいです。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token number\">1000000000000</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>ES2021から、数値リテラル内の区切り文字として_を追加できるNumeric Separatorsがサポートされています。 Numeric Separatorsは、数値リテラル内では区切り文字として_が追加できます。 次のコードも、1兆を数値リテラルで書いています。数値リテラルを評価する際に_は単純に無視されるため同じ意味となります。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token number\">1_000_000_000_000</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>実行後</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token number\">1000000000000</span>\n</code></pre>\n<p>Numeric Separatorsは数値リテラルである整数、浮動小数点、BigIntのリテラル内でのみ利用できます。 また、_はリテラルの先頭や数値の最後に追加することはできません。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\">_123<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 変数として評価される</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">_14</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => SyntaxError</span>\n0x52_<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => SyntaxError</span>\n1234n_<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => SyntaxError</span>\n</code></pre>\n<h3 id=\"文字列string\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#文字列string\"><span class=\"icon icon-link\"></span></a>文字列（String）</h3>\n<p>文字列リテラル共通のルールとして、同じ記号で囲んだ内容を文字列として扱います。 文字列リテラルとして次の3種類のリテラルがありますが、その評価結果はすべて同じ\"文字列\"になります。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文字列\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => \"文字列\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文字列'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => \"文字列\"</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">文字列</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => \"文字列\"</span>\n</code></pre>\n<p>実行後</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\">文字列\n文字列\n文字列\n</code></pre>","ogImage":{"url":"/assets/blog/JavaScript/ES2015.png"},"coverImage":"/assets/blog/JavaScript/ES2015.png","tags":["JavaScript","ES2015"]}},"__N_SSG":true}